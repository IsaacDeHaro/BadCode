### 1. **¿Cómo podemos manejar tipos de notificación adicionales sin modificar la clase `NotificationService`?**

Para abordar este problema, una buena opción es usar el **Patrón Factory Method** o incluso el **Patrón Abstract Factory** si anticipamos que los tipos de notificación pueden tener familias de objetos relacionados.

#### Implementación usando Factory Method

En lugar de que `NotificationService` maneje la lógica de creación de cada tipo de notificación, podemos crear una interfaz de fábrica (`NotificationFactory`) que defina un método para crear notificaciones. Cada tipo de notificación tendrá su propia fábrica que implementará esta interfaz y devolverá la instancia correcta. Así, `NotificationService` solo interactúa con `NotificationFactory`, y la adición de nuevas notificaciones es cuestión de agregar nuevas fábricas.

#### Código

```csharp
using System;

namespace NotificationManager
{
    // Producto abstracto
    public abstract class Notification
    {
        public abstract void Send(string message);
    }

    // Productos concretos
    public class SMSNotification : Notification
    {
        public override void Send(string message)
        {
            Console.WriteLine("Enviando SMS: " + message);
        }
    }

    public class EmailNotification : Notification
    {
        public override void Send(string message)
        {
            Console.WriteLine("Enviando Email: " + message);
        }
    }

    // Creador abstracto de notificaciones
    public abstract class NotificationFactory
    {
        public abstract Notification CreateNotification();
    }

    // Fábricas concretas para cada tipo de notificación
    public class SMSNotificationFactory : NotificationFactory
    {
        public override Notification CreateNotification() => new SMSNotification();
    }

    public class EmailNotificationFactory : NotificationFactory
    {
        public override Notification CreateNotification() => new EmailNotification();
    }

    // Servicio de notificaciones usando la fábrica
    public class NotificationService
    {
        private readonly NotificationFactory _factory;

        public NotificationService(NotificationFactory factory)
        {
            _factory = factory;
        }

        public void SendNotification(string message)
        {
            var notification = _factory.CreateNotification();
            notification.Send(message);
        }
    }

    // Ejemplo de uso
    class Program
    {
        static void Main(string[] args)
        {
            NotificationService smsService = new NotificationService(new SMSNotificationFactory());
            smsService.SendNotification("Mensaje de prueba para SMS");

            NotificationService emailService = new NotificationService(new EmailNotificationFactory());
            emailService.SendNotification("Mensaje de prueba para Email");
        }
    }
}
```

#### Ventajas de este enfoque
1. **Extensibilidad**: Añadir un nuevo tipo de notificación solo requiere crear una nueva fábrica y una nueva clase de notificación.
2. **Abierto a extensiones y cerrado a modificaciones**: Evita modificar el código de `NotificationService` cuando se añaden nuevos tipos de notificación.
3. **Flexibilidad**: El `NotificationService` es independiente de los tipos de notificación específicos, delegando la responsabilidad a las fábricas concretas.
